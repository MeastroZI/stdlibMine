/**
* @license Apache-2.0
*
* Copyright (c) 2025 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

var parseJSDoc = require( 'doctrine' ).parse;
var trim = require( '@stdlib/string/base/trim' );
var reEOL = require( '@stdlib/regexp/eol' );
var isObject = require( '@stdlib/assert/is-object' );
var isEmptyArray = require( '@stdlib/assert/is-empty-array' );
var findJSDoc = require( '@stdlib/_tools/eslint/utils/find-jsdoc' );


// VARIABLES //

var DOPTS = {
	'sloppy': true,
	'unwrap': true,
	'tags': [ 'example' ]
};
var rule;


// FUNCTIONS //

/**
* Checks if a line contains a require statement.
*
* @private
* @param {string} line - line to check
* @returns {boolean} boolean indicating if line contains a require statement
*/
function hasRequire( line ) {
	return trim( line ).indexOf( 'require(' ) !== -1;
}

/**
* Checks if a line is empty.
*
* @private
* @param {string} line - line to check
* @returns {boolean} boolean indicating if line is empty
*/
function isEmpty( line ) {
	return trim( line ) === '';
}


// MAIN //

/**
* Rule to enforce empty lines between `require` statements and code in JSDoc examples.
*
* @param {Object} context - ESLint context
* @returns {Object} rule object
*/
function main( context ) {
	var source = context.getSourceCode();

	/**
	* Reports the error message.
	*
	* @private
	* @param {Object} node - node to report
	*/
	function report( node ) {
		context.report({
			'node': node,
			'message': 'Missing empty line between require statement and code in JSDoc example'
		});
	}

	/**
	* Processes an example tag description.
	*
	* @private
	* @param {string} description - example description
	* @param {Object} node - node to report
	*/
	function processExample( description, node ) {
		var nextLine;
		var lines;
		var i;

		lines = description.split( reEOL.REGEXP );
		for ( i = 0; i < lines.length; i++ ) {
			if ( hasRequire( lines[ i ] ) ) {
				if ( i + 1 >= lines.length ) {
					break;
				}
				nextLine = lines[ i+1 ];
				if ( isEmpty( nextLine ) ) {
					continue;
				}

				// If next line is neither empty nor another require, report the error:
				if ( !hasRequire( nextLine ) ) {
					report( node );
					return;
				}
			}
		}
	}

	/**
	* Checks if a JSDoc comment contains examples with `require` statements which are not followed by empty lines.
	*
	* @private
	* @param {Object} node - node to examine
	*/
	function validate( node ) {
		var jsdoc;
		var tags;
		var tag;
		var ast;
		var j;

		jsdoc = findJSDoc( source, node );
		if ( isObject( jsdoc ) ) {
			ast = parseJSDoc( jsdoc.value, DOPTS );
			tags = ast.tags;
			if ( isEmptyArray( tags ) ) {
				return;
			}
			for ( j = 0; j < tags.length; j++ ) {
				tag = tags[ j ];
				if ( tag.title === 'example' && tag.description ) {
					processExample( tag.description, node );
				}
			}
		}
	}

	return {
		'FunctionDeclaration': validate,
		'VariableDeclaration': validate,
		'ExpressionStatement': validate
	};
}


// MAIN //

rule = {
	'meta': {
		'type': 'suggestion',
		'docs': {
			'description': 'enforce empty lines between requires and code in JSDoc examples'
		},
		'schema': []
	},
	'create': main
};


// EXPORTS //

module.exports = rule;
