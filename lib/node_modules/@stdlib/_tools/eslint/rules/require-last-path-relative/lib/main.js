/**
* @license Apache-2.0
*
* Copyright (c) 2025 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

var startsWith = require( '@stdlib/string/starts-with' );


// FUNCTIONS //

/**
* Checks if a `require` path is relative.
*
* @private
* @param {string} path - `require` path
* @returns {boolean} boolean indicating if path is relative
*/
function isRelativePath( path ) {
	return (
		startsWith( path, './' ) ||
		startsWith( path, '../' )
	);
}


// MAIN //

/**
* ESLint rule to enforce that the last `require` statement is a relative path.
*
* @param {Object} context - ESLint context
* @returns {Object} validators
*/
function main( context ) {
	var requires = [];

	/**
	* Validates `require` statements.
	*
	* @private
	* @param {ASTNode} node - node to examine
	*/
	function validate( node ) {
		var requirePath;
		if (
			node.callee.name === 'require' &&
			node.arguments[ 0 ] &&
			node.arguments[ 0 ].type === 'Literal'
		) {
			requirePath = node.arguments[ 0 ].value;
			requires.push({
				'node': node,
				'path': requirePath,
				'isRelative': isRelativePath( requirePath )
			});
		}
	}

	/**
	* Reports the error message.
	*
	* @private
	* @param {Object} lastRequire - last `require` statement
	*/
	function report( lastRequire ) {
		context.report({
			'node': lastRequire.node,
			'message': 'Last `require` statement in example files must be a relative path'
		});
	}

	/**
	* Callback invoked upon program exit.
	*
	* @private
	*/
	function finish() {
		var lastRequire;
		if ( requires.length > 0 ) {
			lastRequire = requires[ requires.length - 1 ];
			if ( !lastRequire.isRelative ) {
				report( lastRequire );
			}
			requires.length = 0; // reset to ensure that the array is not used across multiple files
		}
	}

	return {
		'CallExpression': validate,
		'Program:exit': finish
	};
}


// EXPORTS //

module.exports = {
	'meta': {
		'type': 'suggestion',
		'docs': {
			'description': 'enforce that the last `require` statement is a relative path'
		},
		'schema': []
	},
	'create': main
};
