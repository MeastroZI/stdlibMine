var defineProperty = require('@stdlib/utils/define-property');
var setNonEnumerable = require('@stdlib/utils/define-nonenumerable-property');
var setHeight = require( './props/height/set.js' );
var getHeight = require( './props/height/get.js' );
var setWidth = require( './props/width/set.js' );
var getWidth = require( './props/width/get.js' );
var setHpos = require( './props/hpos/set.js' );
var getHpos = require( './props/hpos/get.js' );
var setVpos = require( './props/vpos/set.js' );
var getVpos = require( './props/vpos/get.js' );
var setIsFill = require( './props/isfill/set.js' );
var getIsFill = require( './props/isfill/get.js' );
var setIsLine = require( './props/isline/set.js' );
var getIsLine = require( './props/isline/get.js' );
var setNonEnumerableReadOnly = require('@stdlib/utils/define-nonenumerable-read-only-property');
var dfs = require('@stdlib/plot/unicode/static_plots/base/lib/markers.js');
var Pallete = require('./pallete');
var ut = require('./utilies');
var mergeFcn = require( '@stdlib/utils/merge' ).factory;
var objectKeys = require( '@stdlib/utils/keys' );
var defaults = require('./default.js')

// VARIABLES // 

var merge = mergeFcn({
	'extend': false
});

// List of private properties (note: keep in alphabetical order):
var PRIVATE_PROPS = [
	'_heightscale',
	'_widthscale',
	'_hpos',
	'_vpos',
	'_isFill',
	'_isLine',
    '_row',
    '_col',
    '_xlim',
    '_ylim',
    '_padTop',
    '_padBottom',
    '_padLeft',
    '_padRight',
    '_x',
    '_y',
    '_rows',
    '_cols',
    '_marker',
    '_terminalHeight',
    '_terminalWidth'
];

function Primitive() {

    for( i = 0; i < PRIVATE_PROPS; i++ ) {
        defineProperty( this, PRIVATE_PROPS[ i ], {
            'configurable': false,
			'enumerable': false,
			'writable': true,
			'value': null
        } )
    }

    this._x = [];
    this._y = [];
    this._marker = [];
    this._color = [];
    this._palt = new Pallete();
    this._signals = 0;
    this._xlim = [0, 0];
    this._ylim = [0, 0];
    this._cols = 0;
    this._rows = 0;
    var keys;
    var key;
    var i;

    // by defailt 1 padding for frame
    this._padTop = 1;
    this._padBottom = 2;
    this._padLeft = 3;
    this._padRight = 1;

    // this is positions decide the spawn positions for the 
    // horizontle position 
    this._hpscale = 1;
    // vertical position
    this._vpscale = 1;

    var options;
	var nargs;
	var opts;

    nargs = arguments.length;
    opts = defaults();
    if ( nargs ) {
        options = arguments[ 0 ];
    }
    else {
        options = {}
    }
    opts = merge( opts, options );
    keys = objectKeys( opts );
    for ( i = 0; i < keys.length; i++ ) {
        key = keys[i];
        this[ key ] = opts[ key ];
    }
    return this;
    

}

setNonEnumerableReadOnly(Primitive.prototype, 'setSize', function setSize( row , col) {
    // this._terminalWidth = siz[1];
    // this._terminalHeight = siz[0];
    // this._palt.terminalHeight = siz[0];
    // this._palt.terminalWidth = siz[1];



    this._cols = col;
    this._rows = row;
    console.log(` ${this._rows} , ${this._cols}` );
    // this._palt.setSpawnPosition(Math.floor( this._terminalHeight * this._vpos ), Math.floor ( this._terminalWidth * this._hpos ) );
    this._palt.setSize(this._rows, this._cols);
    this._palt.set_matrices();
});

setNonEnumerableReadOnly(Primitive.prototype, 'build', function () {
    var i;
    var j;
    var temp;
    // this._xlim = ut.getLims(this._x);
    // this._ylim = ut.getLims(this._y);

    var sx = [];
    var sy = [];

    // this.drawFrame();

    for (i = 0; i < this._x.length; i++) {
        // sx.push(ut.scale_for_canva(this._x[i], this._rows - this._padTop - this._padBottom, this._xlim, this._padBottom));
        sx.push( this._x[i] );
    }
    for (i = 0; i < this._y.length; i++) {
        // sy.push(ut.scale_for_canva(this._y[i], this._cols - this._padLeft - this._padRight, this._ylim , this._padLeft));
        sy.push( this._y[i] );
    }

    var finalC =[];


    for ( i = 0 ; i < sx.length; i++ ) {
        if ( this._isFill) {
            finalC.push(ut.fillCord(sx[i], sy[i]));
        }

        if ( this._isLine ) {
            finalC.push(ut.fillLine(sx[i], sy[i]))
        }
    }
    // for( i = 0; i < sx.length; i++ ) {
    //     temp = [];
    //     for( j = 0; j < sx[i].length-1; j++ ) {
    //         temp2 = ut.fillLine( [ sx[i][j], sx[i][j+1] ], [ sy[i][j], sy[i][j+1] ] );
    //         temp.push( ...temp2 );
    //     }
    //     finalC.push(temp);
    // }
    var temp;
    for ( i = 0; i < finalC.length; i++ ){
        temp = finalC[i];
        for ( j = 0; j < temp.length; j++ ) {
            this._palt.addElement( temp[j][0], temp[j][1] )
        }
    }
});

setNonEnumerableReadOnly(Primitive.prototype, 'show', function () {
    var canva = this._palt.setcanvas();
    // console.log(canva);
    process.stdout.write(canva)
});

setNonEnumerableReadOnly(Primitive.prototype, 'draw', function (x, y, color, marker) {
    this._x.push(x);
    this._y.push(y);
    this._marker.push(marker || ' ');
    this._color.push(color || 'wh');
    this._signals += 1;
});

setNonEnumerableReadOnly(Primitive.prototype, 'draw_rectangle', function (xb, yb, color, marker) {
    var xm = Math.min(...xb);
    var xM = Math.max(...xb);
    var ym = Math.min(...yb);
    var yM = Math.max(...yb);
    var x = [xm, xm, xM, xM, xm ];
    var y = [ym, yM, yM, ym, ym ];

    this.draw(x, y, color, marker);
});

setNonEnumerableReadOnly(Primitive.prototype, 'addTic', function ( x, y, z, w ) {
    var gap;
    var curr;
    var i;

    if (x &&  x.length > 0 ) {
        for ( i = 0; i < x.length; i++ ) {
            this._palt.addElement( this._padBottom - 1, x[i][1], 'HorTic' );
            this._palt.addHorizontelString( x[i][0], x[i][1], x[i][2].toString() );
        }
    }
    if ( z &&  z.length > 0 ) {
        for ( i = 0; i < z.length; i++ ) {
            this._palt.addElement( this._padBottom - 1, z[i][1], 'HorTic' );
            this._palt.addHorizontelString( z[i][0], z[i][1], z[i][2].toString() );
        }
    }
    if ( y && y.length > 0 ) {
        for ( i = 0; i < y.length; i++ ) {
            this._palt.addElement( y[i][0], this._padLeft - 1, 'VerTic' );
            this._palt.addHorizontelString( y[i][0], y[i][1], y[i][2].toString() );
        }
    }
    if ( w && w.length > 0 ) {
        for ( i = 0; i < w.length; i++ ) {
            this._palt.addElement( w[i][0], his._padLeft - 1, 'VerTic' );
            this._palt.addHorizontelString( w[i][0], w[i][1], w[i][2].toString() );
        }
        // for ( i = this._padBottom ; i < w.length && i < this._rows; i++ ) {
        //     this._palt.addElement( i , this._rows - 1, 'VerTic');
        //     // this._palt.setColor( i , this._rows - 1, 'Fbl');
        //     this._palt.addHorizontelString( i , 0, w[i].toString() );
        // }
    }
});


setNonEnumerableReadOnly(Primitive.prototype, 'draw_bar', function (data, color = undefined, marker = undefined) {
    this.setSize();
    var x = data[0];
    var y = data[1];
    var [ybar, xbar] = ut.scale_bar(x, y, this._cols - this._padLeft - this._padRight , x.length);

    for (let i = 0; i < xbar.length; i++) {
        this.draw_rectangle(xbar[i], ybar[i], color, marker);
    }
});

setNonEnumerableReadOnly( Primitive.prototype, 'drawFrame', function drawFrame() {
    var i;

    for ( i = this._padBottom-1 ; i < this._rows; i++ ){
        this._palt.addElement( i , this._padLeft - 1 , 'vertical');
        this._palt.addElement( i , this._cols-1 , 'vertical');
        this._palt.setColor( i, this._padLeft - 1 , 'Fbl')
        this._palt.setColor( i, this._cols-1, 'Fbl')
    }

    for ( i = this._padLeft-1 ; i < this._cols; i++ ){
        this._palt.addElement( this._padBottom - 1 , i , 'horizontal');
        this._palt.addElement( this._rows-1 , i , 'horizontal');
        this._palt.setColor( this._padBottom - 1, i, 'Fbl')
        this._palt.setColor( this._rows-1, i, 'Fbl')
    }

    // corners 

    this._palt.addElement( this._padBottom - 1 , this._padLeft - 1 , 'LBcorner')
    this._palt.addElement( this._padBottom - 1 , this._cols-1 , 'RBcorner')
    this._palt.addElement( this._rows-1 , this._padLeft - 1 , 'LTcorner')
    this._palt.addElement( this._rows-1 , this._cols-1 , 'RTcorner')
} )

defineProperty( Primitive.prototype, 'heightscale', {
	'configurable': false,
	'enumerable': true,
	'set': setHeight,
	'get': getHeight
});

defineProperty( Primitive.prototype, 'widthscale', {
	'configurable': false,
	'enumerable': true,
	'set': setWidth,
	'get': getWidth
});

defineProperty( Primitive.prototype, 'hpos', {
	'configurable': false,
	'enumerable': true,
	'set': setHpos,
	'get': getHpos
});

defineProperty( Primitive.prototype, 'vpos', {
	'configurable': false,
	'enumerable': true,
	'set': setVpos,
	'get': getVpos
});

defineProperty( Primitive.prototype, 'isfill', {
	'configurable': false,
	'enumerable': true,
	'set': setIsFill,
	'get': getIsFill
});

defineProperty( Primitive.prototype, 'isline', {
    'configurable': false,
    'enumerable': true,
    'set': setIsLine,
    'get': getIsLine
});

module.exports= Primitive;