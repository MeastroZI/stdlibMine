/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

/* eslint-disable no-underscore-dangle */
/* eslint-disable no-invalid-this */
/* eslint-disable max-len */
/* eslint-disable no-restricted-syntax */

'use strict';

var defineProperty = require( '@stdlib/utils/define-property' );
var setNonEnumerableReadOnly = require( '@stdlib/utils/define-nonenumerable-read-only-property' );
var markers = require( '@stdlib/plot/unicode/static_plots/marker/markers.js' );
var ansiColors = require( '@stdlib/plot/unicode/static_plots/marker/colors.js' );


// VARIABLES //

var defaults = {
	'backgroundColor': 'Bwh',
	'forwardColor': 'Frd',
	'marker': 'sp'
};


// MAIN //

/**
* Pallete constructor.
*
* @constructor
* @param {PlotBase} PlotBase - PlotBase instance
* @throws {TypeError} must provide valid options
* @returns {Pallete} Pallete instance
*
* @example
* var pallete = new Pallete();
*/
function Pallete( PlotBase ) {
	defineProperty( this, '_sketch', {
		'configurable': false,
		'enumerable': false,
		'writable': false,
		'value': []
	});
	defineProperty( this, '_colors', {
		'configurable': false,
		'enumerable': false,
		'writable': false,
		'value': []
	});
	defineProperty( this, '_backgrounds', {
		'configurable': false,
		'enumerable': false,
		'writable': false,
		'value': []
	});
	defineProperty( this, '_plotBase', {
		'configurable': false,
		'enumerable': false,
		'writable': false,
		'value': PlotBase
	});

	return this;
}

/**
 * Weather row and col is legal or not.
 *
 * @name isLegal
 * @memberof Primitive.prototype
 * @type {Function}
 * @param {number} row
 * @param {number} col
 * @returns {void}
 *
 */
setNonEnumerableReadOnly( Pallete.prototype, 'isLegal', function isLegal( row, col ) {
	return row < this._sketch.length && col < this._sketch[0].length && row >= 0 && col >=0;
} );

/**
 * Set the ansi character on specific row and column.
 *
 * @name setSketch
 * @memberof Primitive.prototype
 * @type {Function}
 * @param {number} row
 * @param {number} col
 * @param {number} mark
 * @param {boolean} overwrite
 * @returns {void}
 *
 */
setNonEnumerableReadOnly( Pallete.prototype, 'setSketch', function setSketch( row, col, mark, overwrite ) {
	if ( this.isLegal( row, col ) && ( overwrite || ( this._sketch[ row ][ col ] === defaults[ 'marker' ] ) ) ) {
		this._sketch[ row ][ col ] = mark;
	}
} );

/**
 * Add horizontel String on matrix.
 *
 * @name addHorizontelString
 * @memberof Primitive.prototype
 * @type {Function}
 * @param {number} row
 * @param {number} col
 * @param {string} str
 * @param {string} color
 * @param {boolean} overwrite
 * @returns {void}
 *
 */
setNonEnumerableReadOnly( Pallete.prototype, 'addHorizontelString', function addHorizontelString( row, col, str, color, overwrite ) {
	var ch;
	var c;

	c = col;
	for ( ch of str ) {
		this.setElement( row, c, ch, color, overwrite || false );
		c += 1;
	}
} );

/**
 * Set color on the color matrix on specific row and col.
 *
 * @name setColor
 * @memberof Primitive.prototype
 * @type {Function}
 * @param {number} row
 * @param {number} col
 * @param {string} color
 * @param {boolean} overwrite
 * @returns {void}
 *
 */
setNonEnumerableReadOnly( Pallete.prototype, 'setColor', function setColor(row, col, color, overwrite ) {
	if ( this.isLegal( row, col ) && ( overwrite || ( this._colors[ row ][ col ] === defaults[ 'forwardColor' ] ) ) ) {
		this._colors[ row ][ col ] = color;
	}
});

/**
 * Set ansi element and color in matrix.
 *
 * @name setElement
 * @memberof Primitive.prototype
 * @type {Function}
 * @param {number} row
 * @param {number} col
 * @param {string} marker
 * @param {string} color
 * @param {boolean} overwrite
 * @returns {void}
 *
 */
setNonEnumerableReadOnly( Pallete.prototype, 'setElement', function setElement( row, col, marker, color, overwrite ) {
	if ( marker ) {
		this.setSketch( row, col, marker, overwrite );
	}
	if ( color) {
		this.setColor( row, col, color, overwrite );
	}
} );

/**
 * Final render the code name by convert them to ansiCode.
 *
 * @name setcanvas
 * @memberof Primitive.prototype
 * @type {Function}
 * @returns {void}
 *
 */
setNonEnumerableReadOnly( Pallete.prototype, 'setcanvas', function setcanvas() {
	var remainwidth = process.stdout.columns - 0;
	var background;
	var canva = '';
	var color;
	var i;
	var j;

	for ( i = this._sketch.length - 1; i >= 0; i-- ) {
		canva += '\r';
		for ( j = 0; j < this._sketch[ 0 ].length && j < remainwidth; j++ ) {
			// If background color is not same as previous then only we need to change it
			if ( !this.isLegal( i, j - 1 ) || this._backgrounds[ i ][ j ] !== this._backgrounds[ i ][ j - 1 ] ) {
				background = ansiColors[ this._backgrounds[ i ][ j ] ];
				canva += background;
			}
			// If forward color is not same as previous then only we need to change it
			if ( !this.isLegal( i, j - 1 ) || this._colors[ i ][ j ] !== this._colors[ i ][ j - 1 ] ) {
				color = ansiColors[ this._colors[ i ][ j ] ];
				canva += color;
			}
			canva += markers[ this._sketch[ i ][ j ] ];
		}
		canva += ansiColors[ 'def' ];
		canva += '\n';
	}
	this.canva = canva;
	return canva;
} );

/**
 * Initilize the matrices according to the row and column size.
 *
 * @name set_matrices
 * @memberof Primitive.prototype
 * @type {Function}
 * @returns {void}
 *
 */
setNonEnumerableReadOnly( Pallete.prototype, 'setMatrices', function setMatrices() {
	var temp1;
	var temp2;
	var temp3;
	var i;
	var j;

	for ( i = 0; i < this._plotBase._rows; i++ ) {
		temp1 = [];
		temp2 = [];
		temp3 = [];
		for ( j = 0; j < this._plotBase._cols; j++ ) {
			temp1.push( defaults[ 'marker' ] );
			temp2.push( defaults[ 'forwardColor' ] );
			temp3.push( defaults[ 'backgroundColor' ] );
		}
		this._sketch.push( temp1 );
		this._colors.push( temp2 );
		this._backgrounds.push( temp3 );
	}
} );

module.exports = Pallete;
