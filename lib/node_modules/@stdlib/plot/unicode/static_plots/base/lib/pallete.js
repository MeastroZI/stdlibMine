var defineProperty = require( '@stdlib/utils/define-property' );
var setNonEnumerable = require( '@stdlib/utils/define-nonenumerable-property' );
var setNonEnumerableReadOnly = require( '@stdlib/utils/define-nonenumerable-read-only-property' );
var dfs = require('@stdlib/plot/unicode/static_plots/base/lib/markers')
function Pallete () {
    this.counter = 0;
    this.rows = 0;
    this.cols = 0;
    this.top = 0;
    this.left = 0;
    this.canva;
    this.sketch;
    this.colors;
    this.backgrounds;
    this.terminalWidth = process.stdout.columns;
    this.setSize(0,0);
    this.set_matrices();
}

/**
 * set size 
 * set backColor
 * set fontColor
 * set marker
 * 
 * 
 */

setNonEnumerableReadOnly( Pallete.prototype, 'setSize', function setSize( row, col ) {
    this.rows = row;    
    this.cols = col;
} )

setNonEnumerableReadOnly( Pallete.prototype, 'setSpawnPosition', function setPosition( top, left ) {
    this.top = top;
    this.left = left;
} )

setNonEnumerableReadOnly( Pallete.prototype, 'isLegal', function isLegal( row, col ) {
    return row < this.sketch.length && col < this.sketch[0].length && row >= 0 && col >=0;
} )

setNonEnumerableReadOnly( Pallete.prototype, 'setSketch', function setSketch( row, col, mark ) {
    if (this.isLegal( row, col)) {
        this.sketch[row][col] = mark;
    }
} )

setNonEnumerableReadOnly( Pallete.prototype, 'addHorizontelString', function addHorizontelString( row, col, mark) {
    var c = col;
    for(ch of mark) {
        this.setColor( row , c , 'Fbl' );
        this.addElement(row , c, ch );
        c++;
    }
} )
setNonEnumerableReadOnly( Pallete.prototype, 'setColor', function setColor(row, col, color) {
    if (this.isLegal( row, col)) {
        this.colors[row][col] = color;
    }
} )

setNonEnumerableReadOnly( Pallete.prototype, 'addVerticalString', function addHorizontelString() {

} )

setNonEnumerableReadOnly( Pallete.prototype, 'addElement', function addElement( row, col, marker = 'block'  ) {
    this.setSketch( row, col, marker );
    // console.log(this.setcanvas())
    // console.log(this.counter++);
} )

setNonEnumerableReadOnly( Pallete.prototype, 'creatCanva', function creatCanva() {

} )

setNonEnumerableReadOnly( Pallete.prototype, 'drawFrame', function drawFrame() {
    var i;

    for ( i = 0 ; i < this.rows; i++ ){
        this.addElement( i , 0 , 'vertical');
        this.addElement( i , this.cols-1 , 'vertical');
        this.setColor( i, 0, 'Fbl')
        this.setColor( i, this.cols-1, 'Fbl')
    }

    for ( i = 0 ; i < this.cols; i++ ){
        this.addElement( 0 , i , 'horizontal');
        this.addElement( this.rows-1 , i , 'horizontal');
        this.setColor( 0, i, 'Fbl')
        this.setColor( this.rows-1, i, 'Fbl')
    }

    // corners 

    this.addElement( 0 , 0 , 'LBcorner')
    this.addElement( 0 , this.cols-1 , 'RBcorner')
    this.addElement( this.rows-1 , 0 , 'LTcorner')
    this.addElement( this.rows-1 , this.cols-1 , 'RTcorner')
} )

setNonEnumerableReadOnly( Pallete.prototype, 'setcanvas', function setcanvas() {
    var canva = '';
    var color ;
    var background;
    var remainwidth = this.terminalWidth - this.left;
    var i;
    var j;
    // console.log(this.sketch)
    // console.log(this.colors)
    // console.log(this.backgrounds)

    // canva += '\x1b[47m\x1b[94m';
    if ( this.top > 0 ) {
        canva += `\x1b[${this.top}B`
    }
    for( i = this.sketch.length - 1 ; i >= 0; i-- ) {
        canva += '\r';
        if ( this.left > 0 ) {
            canva += `\x1b[${this.left}C`;
        }
        for ( j = 0; j < this.sketch[0].length && j < remainwidth; j++ ) {
            if ( !this.isLegal( i , j - 1 ) || this.backgrounds[i][j] != this.backgrounds[i][j-1] ) {
                background = dfs[this.backgrounds[i][j]];
                if( background == undefined){
                    console.log("bck")
                }
                canva += background;
            }
            if ( !this.isLegal( i , j - 1 ) || this.colors[i][j] != this.colors[i][j-1] ) {
                color = dfs[this.colors[i][j]];
                // if( color == undefined){
                //     console.log("bck")
                // }
                canva += color;
            }
            canva += dfs[this.sketch[i][j]];
        }
        canva += dfs['def']
        canva += '\n';
    }
    this.canva = canva ;
    return this.canva;
} )

setNonEnumerableReadOnly( Pallete.prototype, 'set_matrices', function set_matrices() {
    this.sketch = Array.from({length: this.rows}, ()=> Array(this.cols).fill('sp') );
    this.colors = Array.from({length: this.rows}, ()=> Array(this.cols).fill('Frd') );
    this.backgrounds = Array.from({length: this.rows}, ()=> Array(this.cols).fill('Bbu') );
} )

module.exports = Pallete;