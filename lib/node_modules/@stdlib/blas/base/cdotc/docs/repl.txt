
{{alias}}( N, x, strideX, y, strideY )
    Computes the dot product of two single-precision complex vectors.

    The `N` and stride parameters determine which elements in the strided arrays
    are accessed at runtime.

    Indexing is relative to the first index. To introduce an offset, use a typed
    array view.

    If `N <= 0`, the function returns `0`.

    Parameters
    ----------
    N: integer
        Number of indexed elements.

    x: Complex64Array
        First input array.

    strideX: integer
        Index increment for `x`.

    y: Complex64Array
        Second input array.

    strideY: integer
        Index increment for `y`.

    Returns
    -------
    out: Complex64
        The dot product.

    Examples
    --------
    // Standard usage:
    > var x = new {{alias:@stdlib/array/complex64}}( [ 7.0, -8.0, -1.0, -9.0 ] );
    > var y = new {{alias:@stdlib/array/complex64}}( [ 6.0, -6.0, -9.0, 5.0 ] );
    > var out = {{alias}}( x.length, x, 1, y, 1 );
    > var re = {{alias:@stdlib/complex/float32/real}}( out )
    54
    > var im = {{alias:@stdlib/complex/float32/imag}}( out )
    -80

    // Strides:
    > x = new {{alias:@stdlib/array/complex64}}( [ 7.0, -8.0, -4.0, -7.0, -1.0, -9.0 ] );
    > y = new {{alias:@stdlib/array/complex64}}( [ 6.0, -6.0, -9.0, 5.0, 7.0, -6.0 ] );
    > out = {{alias}}( 2, x, 2, y, 1 );
    > var re = {{alias:@stdlib/complex/float32/real}}( out )
    54
    > var im = {{alias:@stdlib/complex/float32/imag}}( out )
    -80


{{alias}}.ndarray( N, x, strideX, offsetX, y, strideY, offsetY )
    Computes the dot product of two single-precision complex vectors
    using alternative indexing semantics.

    While typed array views mandate a view offset based on the underlying
    buffer, the offset parameters support indexing based on a starting index.

    Parameters
    ----------
    N: integer
        Number of indexed elements.

    x: Complex64Array
        First input array.

    strideX: integer
        Index increment for `x`.

    offsetX: integer
        Starting index for `x`.

    y: Complex64Array
        Second input array.

    strideY: integer
        Index increment for `y`.

    offsetY: integer
        Starting index for `y`.

    Returns
    -------
    out: Complex64
        The dot product.

    Examples
    --------
    // Standard usage:
    > var x = new {{alias:@stdlib/array/complex64}}( [ 7.0, -8.0, -1.0, -9.0 ] );
    > var y = new {{alias:@stdlib/array/complex64}}( [ 6.0, -6.0, -9.0, 5.0 ] );
    > var out = {{alias}}.ndarray( x.length, x, 1, 0, y, 1, 0 );
    > var re = {{alias:@stdlib/complex/float32/real}}( out )
    54
    > var im = {{alias:@stdlib/complex/float32/imag}}( out )
    -80

    // Strides:
    > x = new {{alias:@stdlib/array/complex64}}( [ 7.0, -8.0, -4.0, -7.0, -1.0, -9.0 ] );
    > y = new {{alias:@stdlib/array/complex64}}( [ 6.0, -6.0, -9.0, 5.0, 7.0, -6.0 ] );
    > out = {{alias}}.ndarray( 2, x, 2, 0, y, 1, 0 );
    > var re = {{alias:@stdlib/complex/float32/real}}( out )
    54
    > var im = {{alias:@stdlib/complex/float32/imag}}( out )
    -80

    // Using offset indices:
    > x = new {{alias:@stdlib/array/complex64}}( [ 7.0, -8.0, -4.0, -7.0, -1.0, -9.0 ] );
    > y = new {{alias:@stdlib/array/complex64}}( [ 6.0, -6.0, -9.0, 5.0, 7.0, -6.0 ] );
    > out = {{alias}}.ndarray( 2, x, -2, x.length-1, y, 1, 1 );
    > var re = {{alias:@stdlib/complex/float32/real}}( out )
    61
    > var im = {{alias:@stdlib/complex/float32/imag}}( out )
    -72

    See Also
    --------

