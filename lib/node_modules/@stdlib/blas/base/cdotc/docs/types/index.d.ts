/*
* @license Apache-2.0
*
* Copyright (c) 2025 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

import { Complex64 } from '@stdlib/types/complex';
import { Complex64Array } from '@stdlib/types/array';


// TypeScript Version: 4.1

/**
* Interface describing `cdotc`.
*/
interface Routine {
	/**
	* Computes the dot product of two single-precision complex vectors.
	*
	* @param N - number of indexed elements
	* @param x - first input complex array
	* @param strideX - `x` stride length
	* @param y - second input complex array
	* @param strideY - `y` stride length
	* @returns dot product
	*
	* @example
	* var Complex64Array = require( '@stdlib/array/complex64' );
	*
	* var x = new Complex64Array( [ 7, -8, -1, -9 ] );
	* var y = new Complex64Array( [ 6, -6, -9, 5 ] );
	*
	* var z = cdotc( x.length, x, 1, y, 1 );
	* // returns <Complex64>
	*/
	( N: number, x: Complex64Array, strideX: number, y: Complex64Array, strideY: number ): Complex64;

	/**
	* Computes the dot product of `x` and `y` using alternative indexing semantics.
	*
	* @param N - number of indexed elements
	* @param x - first input array
	* @param strideX - `x` stride length
	* @param offsetX - starting index for `x`
	* @param y - second input array
	* @param strideY - `y` stride length
	* @param offsetY - starting index for `y`
	* @returns dot product
	*
	* @example
	* var Complex64Array = require( '@stdlib/array/complex64' );
	*
	* var x = new Complex64Array( [ 7, -8, -1, -9 ] );
	* var y = new Complex64Array( [ 6, -6, -9, 5 ] );
	*
	* var z = cdotc.ndarray( x.length, x, 1, 0, y, 1, 0 );
	* // returns <Complex64>
	*/
	ndarray( N: number, x: Complex64Array, strideX: number, offsetX: number, y: Complex64Array, strideY: number, offsetY: number ): Complex64;
}

/**
* Computes the dot product of `x` and `y`.
*
* @param N - number of indexed elements
* @param x - first input array
* @param strideX - `x` stride length
* @param y - second input array
* @param strideY - `y` stride length
* @returns dot product
*
* @example
* var Complex64Array = require( '@stdlib/array/complex64' );
*
* var x = new Complex64Array( [ 7, -8, -1, -9 ] );
* var y = new Complex64Array( [ 6, -6, -9, 5 ] );
*
* var z = cdotc( x.length, x, 1, y, 1 );
* // returns <Complex64>
*
* @example
* var Complex64Array = require( '@stdlib/array/complex64' );
*
* var x = new Complex64Array( [ 7, -8, -1, -9 ] );
* var y = new Complex64Array( [ 6, -6, -9, 5 ] );
*
* var z = cdotc.ndarray( x.length, x, 1, 0, y, 1, 0 );
* // returns <Complex64>
*/
declare var cdotc: Routine;


// EXPORTS //

export = cdotc;
