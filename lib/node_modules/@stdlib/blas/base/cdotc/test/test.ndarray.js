/**
* @license Apache-2.0
*
* Copyright (c) 2025 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

var tape = require( 'tape' );
var Complex64Array = require( '@stdlib/array/complex64' );
var Complex64 = require( '@stdlib/complex/float32/ctor' );
var cdotc = require( './../lib/ndarray.js' );


// TESTS //

tape( 'main export is a function', function test( t ) {
	t.ok( true, __filename );
	t.deepEqual( typeof cdotc, 'function', 'main export is a function' );
	t.end();
});

tape( 'the function has an arity of 7', function test( t ) {
	t.deepEqual( cdotc.length, 7, 'returns expected value' );
	t.end();
});

tape( 'the function calculates the dot product of complex vectors `x` and `y`', function test( t ) {
	var expected;
	var dot;
	var x;
	var y;

	x = new Complex64Array([
		0.7,  // 0
		-0.8, // 0
		-0.4, // 1
		-0.7  // 1
	]);
	y = new Complex64Array([
		0.6,  // 0
		-0.6, // 0
		-0.9, // 1
		0.5   // 1
	]);
	expected = new Complex64( 0.91, -0.77 );

	dot = cdotc( x.length, x, 1, 0, y, 1, 0 );
	t.deepEqual( dot, expected, 'returns expected value' );

	t.end();
});

tape( 'if provided an `N` parameter less than or equal to `0`, the function returns Complex( 0.0, 0.0 )', function test( t ) {
	var expected;
	var dot;
	var x;
	var y;

	expected = new Complex64( 0.0, 0.0 );
	x = new Complex64Array( [ -0.1, -0.9, 0.2, -0.8 ] );
	y = new Complex64Array( [ 0.7, -0.6, 0.1, -0.5 ] );

	dot = cdotc( 0, x, 1, 0, y, 1, 0 );
	t.deepEqual( dot, expected, 'returns expected value' );

	dot = cdotc( -4, x, 1, y, 1 );
	t.deepEqual( dot, expected, 'returns expected value' );
	t.end();
});

tape( 'the function supports an `x` stride', function test( t ) {
	var expected;
	var dot;
	var x;
	var y;

	x = new Complex64Array([
		7,  // 0
		-8, // 0
		-4,
		-7,
		-1, // 1
		-9,	// 1
		2,
		-8
	]);
	y = new Complex64Array([
		6,  // 0
		-6, // 0
		-9, // 1
		5,  // 1
		7,
		-6,
		1,
		-5
	]);
	expected = new Complex64( 54, -80 );
	dot = cdotc( 2, x, 2, 0, y, 1, 0 );
	t.deepEqual( dot, expected, 'returns expected value' );
	t.end();
});

tape( 'the function supports complex access patterns', function test( t ) {
	var expected;
	var dot;
	var x;
	var y;

	x = new Complex64Array([
		7,  // 0
		-8, // 0
		-4,
		-7,
		-1, // 1
		-9, // 1
		2,
		-8
	]);
	y = new Complex64Array([
		6,  // 1
		-6, // 1
		-9, // 0
		5,  // 0
		7,
		-6,
		1,
		-5
	]);
	expected = new Complex64( -55, 23 );

	dot = cdotc( 2, x, 2, 0, y, -1, 1 );
	t.deepEqual( dot, expected, 'returns expected value' );
	t.end();
});

tape( 'the function supports an `y` stride', function test( t ) {
	var expected;
	var dot;
	var x;
	var y;

	x = new Complex64Array([
		7,  // 0
		-8, // 0
		-4, // 1
		-7, // 1
		-1,
		-9,
		2,
		-8
	]);
	y = new Complex64Array([
		6,  // 0
		-6, // 0
		-9,
		5,
		7,  // 1
		-6, // 1
		1,
		-5
	]);
	expected = new Complex64( 104, 79 );

	dot = cdotc( 2, x, 1, 0, y, 2, 0 );
	t.deepEqual( dot, expected, 'returns expected value' );
	t.end();
});

tape( 'the function supports negative strides', function test( t ) {
	var expected;
	var dot;
	var x;
	var y;

	x = new Complex64Array([
		7,  // 1
		-8, // 1
		-4, // 0
		-7, // 0
		-1,
		-9,
		2,
		-8
	]);
	y = new Complex64Array([
		6,  // 1
		-6, // 1
		-9,
		5,
		7,  // 0
		-6, // 0
		1,
		-5
	]);
	expected = new Complex64( 104, 79 );

	dot = cdotc( 2, x, -1, 1, y, -2, 2 );
	t.deepEqual( dot, expected, 'returns expected value' );
	t.end();
});
