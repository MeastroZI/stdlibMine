/**
* @license Apache-2.0
*
* Copyright (c) 2023 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

var float64ToFloat32 = require( '@stdlib/number/float64/base/to-float32' );
var absf = require( '@stdlib/math/base/special/absf' );
var sqrtf = require( '@stdlib/math/base/special/sqrtf' );
var abs2f = require( '@stdlib/math/base/special/abs2f' );
var copysignf = require( '@stdlib/math/base/special/copysignf' );
const abs = require('@stdlib/math/special/abs');

var GAM = 4096;
var GAMSQ = GAM*GAM;
var RGAMSQ = 1/GAMSQ ;

// MAIN //

/**
* Constructs a Givens plane rotation.
*
* @param {number} a - rotational elimination parameter
* @param {number} b - rotational elimination parameter
* @param {Float32Array} out - output array
* @param {integer} stride - index increment
* @param {NonNegativeInteger} offset - starting index
* @returns {Float32Array} output array
*
* @example
* var Float32Array = require( '@stdlib/array/float32' );
*
* var out = srotg( 0.0, 2.0, new Float32Array( 4 ), 1, 0 );
*  // returns <Float32Array>[ 2.0, 1.0, 0.0, 1.0 ]
*/
function srotmg( d1, d2, x, y, out, stride, offset ) {
	var tempsd2;
    var sflag;
	var sh11;
	var sh12;
	var sh21;
	var sh22;
    var sd1;
    var sd2;
	var sp1;
	var sp2;
    var sq1;
    var sq2;
    var sx;
	var su;

	if ( d1 < 0 ) {
        sflag = -1;
        sh11 = 0;
        sh12 = 0;
        sh21 = 0;
        sh22 = 0;

        sd1 = 0; // d1;
        sd2 = 0;   // d2;
        sx = 0;   // sx1;
	} else {
		sp2 = d2 * y;
		if ( sp2 == 0.0 ) {
			sflag = -2;
            out[ offset + stride * 3 ] = sflag;
			return;
		}
		sp1 = d1 * x;
		sq2 = sp2 * y;
		sq1 = sp1 * x;
		if ( abs( sq1 ) > abs( sq2 ) ) {
			sh21 = -y / x;
			sh12 = sp2 / sp1;
			su = 1 - sh12 * sh21;

			if ( su > 0 ) {
				sflag = 0;
                sd1 = sd1 / su;
                sd2 = sd2 / su;
                sx1 = sx1 * su;   
			} else {
				sflag = -1;
				sh11 = 0;
				sh12 = 0;
				sh21 = 0;
				sh22 = 0;
                sd1 = 0;
                sd2 = 0;
                sx = 0;
			}
		}
		else {
			if ( sq2 < 0 ) {
				sflag = -1;
				sh11 = 0;
				sh12 = 0;
				sh21 = 0;
				sh22 = 0;
                sd1 = 0;
                sd2 = 0;
                sx = 0;
			}
			else {
				sflag = 1;
				sh11 = sp1 / sp2;
				sh22 = x / y;
                su = 1 + sh11 * sh22;
                sd1 = sd2 / su;
                sd2 = sd1 / su;
                sx = y * su;
			}
		}

        if ( sd1 != 0 ) {
			while ( sd1 <= GAM || sd1 >= GAMSQ ) {
				if ( sflag == 0 ) {
					sh11 = 1;
					sh22 = 1;
					sflag = -1;
				}
				else {
					sh21 = -1;
					sh12 = 1;
					sflag = -1;
				}
				if ( sd1 < RGAMSQ ) {
					sd1 = sd1 * pow( GAM, 2 );
					sx = sx / GAM;
					sh11 = sh11 / GAM;
					sh12 = sh12 / GAM;
				}
				else {
					sd1 = sd1 / pow( GAM, 2);
					sx = sx * GAM;
					sh11 = sh11 * GAM;
					sh12 = sh12 * GAM;
				}
			}
		}

		if ( sd2 != 0 ) {
			tempsd2 = abs( sd2 );
			while ( ( tempsd2 <= RGAMSQ ) || ( tempsd2 >= GAMSQ ) ) {
				if ( sflag == 0 ) {
					sh11 = 1;
					sh22 = 1;
					sflag = -1;
				}
				else {
					sh21 = -1;
					sh12 = 1;
					sflag = -1;
				}
				if ( tempsd2 < RGAMSQ ) {
					sd2 = sd2 * pow( GAM, 2 );
					sh21 = sh21 / GAM;
					sh22 = sh22 / GAM;
				}
				else {
					sd2 = sd2 / pow( GAM, 2 );
					sh21 = sh21 * GAM;
					sh22 = sh22 * GAM;
				}
			}
		}
		if ( sflag < 0 ) {
			out[ offset + stride*4 ] = sh11;
			out[ offset + stride*5 ] = sh21;
			out[ offset + stride*6 ] = sh21;
			out[ offset + stride*7 ] = sh22;
		}
		else if ( sflag == 0 ) {
			out [ offset + stride*5 ] = sh11;
			out [ offset + stride*7 ] = sh22;
		}
		else {
			out[ offset + stride*4 ] = sh11;
			out[ offset + stride*7 ] = sh11;
		}

		out[ offset ] = sd1;
		out[ offset + stride ] = sd2;
		out[ offset + stride*2 ] = sx;
		out[ offset + stride*3 ] = sflag;
		return out;
    }
}


// EXPORTS //

module.exports = srotg;
